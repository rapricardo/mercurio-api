#!/bin/bash

# üöÄ Mercurio API - Docker Run Examples
# Examples of how to run the Mercurio API Docker container in different scenarios

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}$1${NC}"
    echo "$(printf '=%.0s' {1..50})"
}

print_example() {
    echo -e "${GREEN}üí° Example: $1${NC}"
    echo ""
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_header "üöÄ MERCURIO API - DOCKER RUN EXAMPLES"
echo ""

print_example "1. Basic Development Run"
echo "# Simple run with minimal configuration"
echo "docker run -d \\"
echo "  --name mercurio-api \\"
echo "  -p 3000:3000 \\"
echo "  -e DATABASE_URL='postgresql://user:pass@host:5432/mercurio' \\"
echo "  -e ENCRYPTION_KEK_SECRET='your-base64-key' \\"
echo "  -e EMAIL_DEK_SECRET='your-email-key' \\"
echo "  -e PHONE_DEK_SECRET='your-phone-key' \\"
echo "  -e EMAIL_FINGERPRINT_SECRET='your-email-fingerprint' \\"
echo "  -e PHONE_FINGERPRINT_SECRET='your-phone-fingerprint' \\"
echo "  mercurio-api:latest"
echo ""
echo "# Test health"
echo "curl http://localhost:3000/health"
echo ""
echo ""

print_example "2. Production Run with Environment File"
echo "# Create .env.production file first (see .env.production.example)"
echo "docker run -d \\"
echo "  --name mercurio-api-prod \\"
echo "  -p 3000:3000 \\"
echo "  --env-file .env.production \\"
echo "  --restart unless-stopped \\"
echo "  --memory=1g \\"
echo "  --cpus=1.0 \\"
echo "  mercurio-api:latest"
echo ""
echo ""

print_example "3. Production with External Database & Redis"
echo "# Run with external PostgreSQL and Redis for optimal performance"
echo "docker run -d \\"
echo "  --name mercurio-api-prod \\"
echo "  -p 3000:3000 \\"
echo "  -e NODE_ENV=production \\"
echo "  -e DATABASE_URL='postgresql://mercurio_user:secure_password@postgres.example.com:5432/mercurio_prod' \\"
echo "  -e REDIS_ENABLED=true \\"
echo "  -e REDIS_URL='redis://redis.example.com:6379' \\"
echo "  -e ENCRYPTION_KEK_SECRET='production-kek-secret-base64' \\"
echo "  -e EMAIL_DEK_SECRET='production-email-key-base64' \\"
echo "  -e PHONE_DEK_SECRET='production-phone-key-base64' \\"
echo "  -e EMAIL_FINGERPRINT_SECRET='production-email-fingerprint-hex' \\"
echo "  -e PHONE_FINGERPRINT_SECRET='production-phone-fingerprint-hex' \\"
echo "  -e LOG_LEVEL=info \\"
echo "  -e CORS_ORIGIN='https://myapp.com,https://admin.myapp.com' \\"
echo "  --restart unless-stopped \\"
echo "  --memory=2g \\"
echo "  --cpus=2.0 \\"
echo "  --log-driver=json-file \\"
echo "  --log-opt max-size=10m \\"
echo "  --log-opt max-file=3 \\"
echo "  mercurio-api:latest"
echo ""
echo ""

print_example "4. Development with Volume Mounts"
echo "# Useful for development with live reloading (not recommended for production)"
echo "docker run -d \\"
echo "  --name mercurio-api-dev \\"
echo "  -p 3000:3000 \\"
echo "  -e NODE_ENV=development \\"
echo "  -e DATABASE_URL='postgresql://postgres:postgres@host.docker.internal:5432/mercurio_dev' \\"
echo "  -e ENCRYPTION_KEK_SECRET='dev-kek-secret' \\"
echo "  -e EMAIL_DEK_SECRET='dev-email-secret' \\"
echo "  -e PHONE_DEK_SECRET='dev-phone-secret' \\"
echo "  -e EMAIL_FINGERPRINT_SECRET='dev-email-fingerprint' \\"
echo "  -e PHONE_FINGERPRINT_SECRET='dev-phone-fingerprint' \\"
echo "  -e DEBUG_ENABLED=true \\"
echo "  -e LOG_LEVEL=debug \\"
echo "  -v \$(pwd)/logs:/app/logs \\"
echo "  mercurio-api:latest"
echo ""
echo ""

print_example "5. Multi-container with Docker Network"
echo "# Create a Docker network first"
echo "docker network create mercurio-network"
echo ""
echo "# Run PostgreSQL container (for testing only)"
echo "docker run -d \\"
echo "  --name mercurio-postgres \\"
echo "  --network mercurio-network \\"
echo "  -e POSTGRES_DB=mercurio \\"
echo "  -e POSTGRES_USER=mercurio \\"
echo "  -e POSTGRES_PASSWORD=mercurio123 \\"
echo "  -v mercurio-postgres-data:/var/lib/postgresql/data \\"
echo "  postgres:15-alpine"
echo ""
echo "# Run Redis container (optional)"
echo "docker run -d \\"
echo "  --name mercurio-redis \\"
echo "  --network mercurio-network \\"
echo "  -v mercurio-redis-data:/data \\"
echo "  redis:7-alpine redis-server --appendonly yes"
echo ""
echo "# Run Mercurio API"
echo "docker run -d \\"
echo "  --name mercurio-api \\"
echo "  --network mercurio-network \\"
echo "  -p 3000:3000 \\"
echo "  -e DATABASE_URL='postgresql://mercurio:mercurio123@mercurio-postgres:5432/mercurio' \\"
echo "  -e REDIS_ENABLED=true \\"
echo "  -e REDIS_URL='redis://mercurio-redis:6379' \\"
echo "  -e ENCRYPTION_KEK_SECRET='network-kek-secret' \\"
echo "  -e EMAIL_DEK_SECRET='network-email-secret' \\"
echo "  -e PHONE_DEK_SECRET='network-phone-secret' \\"
echo "  -e EMAIL_FINGERPRINT_SECRET='network-email-fingerprint' \\"
echo "  -e PHONE_FINGERPRINT_SECRET='network-phone-fingerprint' \\"
echo "  --restart unless-stopped \\"
echo "  mercurio-api:latest"
echo ""
echo ""

print_example "6. Production with Health Checks & Monitoring"
echo "# Production setup with health checks and proper monitoring"
echo "docker run -d \\"
echo "  --name mercurio-api-prod \\"
echo "  -p 3000:3000 \\"
echo "  --env-file .env.production \\"
echo "  --restart unless-stopped \\"
echo "  --memory=2g \\"
echo "  --cpus=2.0 \\"
echo "  --health-cmd='curl -f http://localhost:3000/health || exit 1' \\"
echo "  --health-interval=30s \\"
echo "  --health-timeout=10s \\"
echo "  --health-retries=3 \\"
echo "  --health-start-period=40s \\"
echo "  --log-driver=json-file \\"
echo "  --log-opt max-size=50m \\"
echo "  --log-opt max-file=5 \\"
echo "  --label='traefik.enable=true' \\"
echo "  --label='traefik.http.routers.mercurio.rule=Host(\`api.yourdomain.com\`)' \\"
echo "  --label='traefik.http.routers.mercurio.tls=true' \\"
echo "  --label='traefik.http.services.mercurio.loadbalancer.server.port=3000' \\"
echo "  mercurio-api:latest"
echo ""
echo ""

print_header "üîß MANAGEMENT COMMANDS"
echo ""

echo -e "${GREEN}Check container status:${NC}"
echo "docker ps | grep mercurio"
echo ""

echo -e "${GREEN}View logs:${NC}"
echo "docker logs -f mercurio-api"
echo ""

echo -e "${GREEN}Execute commands inside container:${NC}"
echo "docker exec -it mercurio-api sh"
echo ""

echo -e "${GREEN}Stop and remove container:${NC}"
echo "docker stop mercurio-api && docker rm mercurio-api"
echo ""

echo -e "${GREEN}Update container:${NC}"
echo "docker pull mercurio-api:latest"
echo "docker stop mercurio-api && docker rm mercurio-api"
echo "# Then run again with same parameters"
echo ""

echo -e "${GREEN}Monitor container resources:${NC}"
echo "docker stats mercurio-api"
echo ""

echo -e "${GREEN}Container health check:${NC}"
echo "docker inspect mercurio-api | jq '.[0].State.Health'"
echo ""

print_header "üîç TROUBLESHOOTING"
echo ""

print_warning "Common Issues & Solutions:"
echo ""
echo "1. Container won't start:"
echo "   - Check logs: docker logs mercurio-api"
echo "   - Verify environment variables are set"
echo "   - Ensure database is accessible"
echo ""
echo "2. Database connection failed:"
echo "   - Verify DATABASE_URL is correct"
echo "   - Check network connectivity"
echo "   - Ensure database is running and accepting connections"
echo ""
echo "3. High memory usage:"
echo "   - Monitor with: docker stats mercurio-api"
echo "   - Check application logs for memory leaks"
echo "   - Consider increasing container memory limit"
echo ""
echo "4. Performance issues:"
echo "   - Enable Redis: REDIS_ENABLED=true"
echo "   - Check monitoring endpoint: curl http://localhost:3000/monitoring/performance"
echo "   - Review database query performance"
echo ""

print_header "üöÄ QUICK START COMMANDS"
echo ""

echo -e "${GREEN}1. Build the image:${NC}"
echo "./build-docker.sh latest"
echo ""

echo -e "${GREEN}2. Create production config:${NC}"
echo "cp .env.production.example .env.production"
echo "# Edit .env.production with your values"
echo ""

echo -e "${GREEN}3. Run in production:${NC}"
echo "docker run -d --name mercurio-api -p 3000:3000 --env-file .env.production --restart unless-stopped mercurio-api:latest"
echo ""

echo -e "${GREEN}4. Test the API:${NC}"
echo "curl http://localhost:3000/health"
echo "curl http://localhost:3000/monitoring/metrics"
echo ""

echo -e "${BLUE}For more information, check the documentation at /docs${NC}"