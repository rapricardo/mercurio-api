version: '3.8'

# Mercurio API Stack for Portainer
# Copy this content into Portainer Stack configuration

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: mercurio
      POSTGRES_USER: mercurio_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
    networks:
      - mercurio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mercurio_user -d mercurio"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    labels:
      - "traefik.enable=false"

  # Mercurio API - Uses image from GitHub Container Registry
  api:
    image: ghcr.io/YOUR_GITHUB_USERNAME/mercurio-api:latest
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      
      # Database connection
      DATABASE_URL: postgresql://mercurio_user:${POSTGRES_PASSWORD}@postgres:5432/mercurio?schema=public
      
      # Encryption secrets (GENERATE NEW ONES FOR PRODUCTION!)
      ENCRYPTION_KEK_SECRET: ${ENCRYPTION_KEK_SECRET}
      EMAIL_DEK_SECRET: ${EMAIL_DEK_SECRET}
      PHONE_DEK_SECRET: ${PHONE_DEK_SECRET}
      EMAIL_FINGERPRINT_SECRET: ${EMAIL_FINGERPRINT_SECRET}
      PHONE_FINGERPRINT_SECRET: ${PHONE_FINGERPRINT_SECRET}
      ENCRYPTION_KEY_VERSION: "1"
      
      # Rate limiting
      REDIS_ENABLED: "false"
      API_KEY_CACHE_TTL: "300000"
      
      # Logging
      LOG_LEVEL: info
      
      # Performance
      NODE_OPTIONS: "--max-old-space-size=512"
      
    volumes:
      - api_logs:/app/logs
    networks:
      - mercurio_network
      - n8n_network  # Connect to existing N8N network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    labels:
      # Traefik labels (if using Traefik for reverse proxy)
      - "traefik.enable=true"
      - "traefik.http.routers.mercurio-api.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.routers.mercurio-api.tls=true"
      - "traefik.http.routers.mercurio-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.mercurio-api.loadbalancer.server.port=3000"

  # Redis for rate limiting (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - mercurio_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - redis
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    labels:
      - "traefik.enable=false"

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local

networks:
  mercurio_network:
    driver: bridge
    internal: true  # Internal network - API not directly exposed
  n8n_network:
    external: true  # Connect to existing N8N network
    name: n8n_network  # Adjust to your N8N network name