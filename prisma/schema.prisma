// Prisma schema for Mercurio API
// Following BIGINT ID strategy with external prefixes (tn_, ws_, etc.)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELED
}

// Core tenancy tables
model Tenant {
  id            BigInt         @id @default(autoincrement())
  name          String         @db.VarChar(255)
  status        String         @default("active") @db.VarChar(50)
  createdAt     DateTime       @default(now()) @map("created_at")
  
  workspaces        Workspace[]
  visitors          Visitor[]
  leads             Lead[]
  identityLinks     IdentityLink[]
  sessions          Session[]
  events            Event[]
  funnels           Funnel[]
  funnelUserStates  FunnelUserState[]
  userWorkspaceAccess UserWorkspaceAccess[]
  invitations       Invitation[]

  @@map("tenant")
}

model Workspace {
  id            BigInt         @id @default(autoincrement())
  tenantId      BigInt         @map("tenant_id")
  name          String         @db.VarChar(255)
  createdAt     DateTime       @default(now()) @map("created_at")
  
  tenant           Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  apiKeys          ApiKey[]
  visitors         Visitor[]
  leads            Lead[]
  identityLinks    IdentityLink[]
  sessions         Session[]
  events           Event[]
  funnels          Funnel[]
  funnelUserStates FunnelUserState[]
  userWorkspaceAccess UserWorkspaceAccess[]
  invitations      Invitation[]

  @@index([tenantId])
  @@map("workspace")
}

model ApiKey {
  id          BigInt    @id @default(autoincrement())
  workspaceId BigInt    @map("workspace_id")
  name        String    @db.VarChar(255)
  keyHash     String    @map("key_hash") @db.VarChar(255)
  scopes      Json      @default("[]")
  createdAt   DateTime  @default(now()) @map("created_at")
  lastUsedAt  DateTime? @map("last_used_at")
  revokedAt   DateTime? @map("revoked_at")
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@map("api_key")
}

// Identity system tables
model Visitor {
  anonymousId   String    @id @map("anonymous_id") @db.VarChar(50) // client-generated: a_xxxxx
  tenantId      BigInt    @map("tenant_id")
  workspaceId   BigInt    @map("workspace_id")
  firstSeenAt   DateTime  @default(now()) @map("first_seen_at")
  lastSeenAt    DateTime  @default(now()) @map("last_seen_at")
  firstUtm      Json?     @map("first_utm")
  lastUtm       Json?     @map("last_utm")
  lastDevice    Json?     @map("last_device")
  lastGeo       Json?     @map("last_geo")
  
  tenant           Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspace        Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  identityLinks    IdentityLink[]
  sessions         Session[]
  events           Event[]
  funnelUserStates FunnelUserState[]

  @@index([tenantId, workspaceId])
  @@index([tenantId, workspaceId, lastSeenAt])
  @@map("visitor")
}

model Lead {
  id                BigInt    @id @default(autoincrement())
  tenantId          BigInt    @map("tenant_id")
  workspaceId       BigInt    @map("workspace_id")
  emailEnc          String?   @map("email_enc") @db.Text // encrypted
  emailFingerprint  String?   @map("email_fingerprint") @db.VarChar(64) // HMAC-SHA256 for matching
  emailKeyVersion   Int?      @default(1) @map("email_key_version") // for key rotation
  phoneEnc          String?   @map("phone_enc") @db.Text // encrypted
  phoneFingerprint  String?   @map("phone_fingerprint") @db.VarChar(64) // HMAC-SHA256 for matching
  phoneKeyVersion   Int?      @default(1) @map("phone_key_version") // for key rotation
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")
  
  tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  identityLinks     IdentityLink[]
  events            Event[]
  funnelUserStates  FunnelUserState[]

  @@index([tenantId, workspaceId])
  @@index([tenantId, workspaceId, emailFingerprint])
  @@index([tenantId, workspaceId, phoneFingerprint])
  @@map("lead")
}

model IdentityLink {
  tenantId    BigInt   @map("tenant_id")
  workspaceId BigInt   @map("workspace_id")
  anonymousId String   @map("anonymous_id") @db.VarChar(50)
  leadId      BigInt   @map("lead_id")
  firstAt     DateTime @default(now()) @map("first_at")
  lastAt      DateTime @default(now()) @map("last_at")
  
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  visitor     Visitor  @relation(fields: [anonymousId], references: [anonymousId], onDelete: Cascade)
  lead        Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@id([tenantId, workspaceId, anonymousId, leadId])
  @@index([tenantId, workspaceId, anonymousId])
  @@index([tenantId, workspaceId, leadId])
  @@map("identity_link")
}

// Events & Sessions tables
model Session {
  sessionId   String    @id @map("session_id") @db.VarChar(50) // client-generated: s_xxxxx
  tenantId    BigInt    @map("tenant_id")
  workspaceId BigInt    @map("workspace_id")
  anonymousId String    @map("anonymous_id") @db.VarChar(50)
  startedAt   DateTime  @default(now()) @map("started_at")
  endedAt     DateTime? @map("ended_at")
  userAgent   String?   @map("user_agent") @db.Text
  
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  visitor     Visitor   @relation(fields: [anonymousId], references: [anonymousId], onDelete: Cascade)
  events      Event[]

  @@index([tenantId, workspaceId])
  @@index([tenantId, workspaceId, anonymousId])
  @@index([tenantId, workspaceId, startedAt])
  @@map("session")
}

model Event {
  id            BigInt   @default(autoincrement())
  eventId       String?  @map("event_id") @db.VarChar(100) // Client-provided ID for deduplication
  schemaVersion String   @map("schema_version") @db.VarChar(10)
  eventName     String   @map("event_name") @db.VarChar(100)
  timestamp     DateTime
  tenantId      BigInt   @map("tenant_id")
  workspaceId   BigInt   @map("workspace_id")
  anonymousId   String   @map("anonymous_id") @db.VarChar(50)
  leadId        BigInt?  @map("lead_id")
  sessionId     String?  @map("session_id") @db.VarChar(50)
  page          Json?
  utm           Json?
  device        Json?
  geo           Json?
  props         Json?
  ingestedAt    DateTime @default(now()) @map("ingested_at")
  
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  visitor       Visitor  @relation(fields: [anonymousId], references: [anonymousId], onDelete: Cascade)
  lead          Lead?    @relation(fields: [leadId], references: [id], onDelete: SetNull)
  session       Session? @relation(fields: [sessionId], references: [sessionId], onDelete: SetNull)

  // Composite primary key for partitioning
  @@id([id, tenantId, timestamp])
  // Primary indexes for event querying patterns
  @@index([tenantId, workspaceId, timestamp])
  @@index([tenantId, workspaceId, anonymousId, timestamp])
  @@index([tenantId, workspaceId, eventName, timestamp])
  @@index([tenantId, workspaceId, leadId, timestamp])
  @@index([tenantId, workspaceId, sessionId, timestamp])
  // Unique constraint for deduplication (only when eventId is provided)
  @@unique([tenantId, eventId], name: "unique_tenant_event")
  @@map("event")
}

// Funnel system tables
model Funnel {
  id          BigInt    @id @default(autoincrement())
  tenantId    BigInt    @map("tenant_id")
  workspaceId BigInt    @map("workspace_id")
  name        String    @db.VarChar(255)
  description String?   @db.Text
  createdBy   BigInt?   @map("created_by") // user_id when implemented
  createdAt   DateTime  @default(now()) @map("created_at")
  archivedAt  DateTime? @map("archived_at")
  
  tenant       Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspace    Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  versions     FunnelVersion[]
  publications FunnelPublication[]
  userStates   FunnelUserState[]

  @@index([tenantId, workspaceId])
  @@index([tenantId, workspaceId, createdAt])
  @@map("funnel")
}

model FunnelVersion {
  id        BigInt   @id @default(autoincrement())
  funnelId  BigInt   @map("funnel_id")
  version   Int
  state     String   @default("draft") @db.VarChar(20) // draft, published
  createdBy BigInt?  @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  
  funnel    Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  steps     FunnelStep[]

  @@unique([funnelId, version])
  @@index([funnelId, state])
  @@map("funnel_version")
}

model FunnelPublication {
  id          BigInt   @id @default(autoincrement())
  funnelId    BigInt   @map("funnel_id")
  version     Int
  publishedAt DateTime @default(now()) @map("published_at")
  windowDays  Int      @default(7) @map("window_days")
  notes       String?  @db.Text
  
  funnel      Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId, publishedAt])
  @@map("funnel_publication")
}

model FunnelStep {
  id              BigInt    @id @default(autoincrement())
  funnelVersionId BigInt    @map("funnel_version_id")
  orderIndex      Int       @map("order_index")
  type            String    @db.VarChar(20) // start, page, event, decision, conversion
  label           String    @db.VarChar(255)
  metadata        Json?
  
  funnelVersion   FunnelVersion @relation(fields: [funnelVersionId], references: [id], onDelete: Cascade)
  matches         FunnelStepMatch[]

  @@unique([funnelVersionId, orderIndex])
  @@index([funnelVersionId, orderIndex])
  @@map("funnel_step")
}

model FunnelStepMatch {
  id           BigInt     @id @default(autoincrement())
  funnelStepId BigInt     @map("funnel_step_id")
  kind         String     @db.VarChar(20) // page, event
  rules        Json       // { url_match, event_name, prop_filters, etc }
  
  funnelStep   FunnelStep @relation(fields: [funnelStepId], references: [id], onDelete: Cascade)

  @@index([funnelStepId])
  @@map("funnel_step_match")
}

// User state tracking for real-time funnel progression
model FunnelUserState {
  id              BigInt    @id @default(autoincrement())
  tenantId        BigInt    @map("tenant_id")
  workspaceId     BigInt    @map("workspace_id")
  funnelId        BigInt    @map("funnel_id")
  funnelVersionId BigInt    @map("funnel_version_id")
  anonymousId     String    @map("anonymous_id") @db.VarChar(50)
  leadId          BigInt?   @map("lead_id")
  currentStepId   BigInt?   @map("current_step_id")
  currentStepIndex Int?     @map("current_step_index")
  enteredAt       DateTime  @default(now()) @map("entered_at")
  lastActivityAt  DateTime  @default(now()) @map("last_activity_at")
  completedAt     DateTime? @map("completed_at")
  exitedAt        DateTime? @map("exited_at")
  exitStepIndex   Int?      @map("exit_step_index")
  conversionTime  Int?      @map("conversion_time_seconds")
  status          String    @default("active") @db.VarChar(20) // active, completed, exited, abandoned
  metadata        Json?     // Additional tracking data
  
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  funnel          Funnel    @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  visitor         Visitor   @relation(fields: [anonymousId], references: [anonymousId], onDelete: Cascade)
  lead            Lead?     @relation(fields: [leadId], references: [id], onDelete: SetNull)

  // Unique constraint to ensure one active state per user per funnel
  @@unique([tenantId, workspaceId, funnelId, anonymousId], name: "unique_user_funnel_state")
  @@index([tenantId, workspaceId, funnelId])
  @@index([tenantId, workspaceId, anonymousId])
  @@index([tenantId, workspaceId, funnelId, status])
  @@index([tenantId, workspaceId, funnelId, lastActivityAt])
  @@index([funnelId, currentStepIndex, status])
  @@map("funnel_user_state")
}

// User management tables for Supabase integration
model UserProfile {
  id              String    @id // Supabase UUID
  email           String    @unique
  name            String?   @db.VarChar(255)
  avatarUrl       String?   @map("avatar_url") @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  lastLoginAt     DateTime? @map("last_login_at")
  
  workspaceAccess UserWorkspaceAccess[]
  createdInvitations  Invitation[] @relation("CreatedInvitations")
  acceptedInvitations Invitation[] @relation("AcceptedInvitations")

  @@map("user_profile")
}

model UserWorkspaceAccess {
  id          BigInt   @id @default(autoincrement())
  userId      String   @map("user_id") // Supabase UUID
  tenantId    BigInt   @map("tenant_id")
  workspaceId BigInt   @map("workspace_id")
  role        String   @default("viewer") @db.VarChar(50) // admin, editor, viewer
  grantedAt   DateTime @default(now()) @map("granted_at")
  grantedBy   String?  @map("granted_by") // Supabase UUID of granter
  revokedAt   DateTime? @map("revoked_at")
  
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId, workspaceId], name: "unique_user_workspace")
  @@index([userId])
  @@index([tenantId, workspaceId])
  @@index([tenantId, workspaceId, role])
  @@map("user_workspace_access")
}

model Invitation {
  id          BigInt       @id @default(autoincrement())
  tenantId    BigInt       @map("tenant_id")
  workspaceId BigInt       @map("workspace_id")
  email       String       @db.VarChar(255)
  role        String       @db.VarChar(50) // admin, editor, viewer
  token       String       @unique @db.VarChar(255)
  status      InviteStatus @default(PENDING)
  expiresAt   DateTime     @map("expires_at")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy   UserProfile? @relation("CreatedInvitations", fields: [createdById], references: [id])
  createdById String?      @map("created_by_id")
  acceptedBy  UserProfile? @relation("AcceptedInvitations", fields: [acceptedById], references: [id])
  acceptedById String?     @map("accepted_by_id")
  
  @@unique([tenantId, workspaceId, email, status], name: "unique_workspace_email_status")
  @@index([tenantId])
  @@index([workspaceId])
  @@index([tenantId, workspaceId])
  @@index([token])
  @@index([email])
  @@index([expiresAt])
  @@index([status])
  @@map("invitation")
}
