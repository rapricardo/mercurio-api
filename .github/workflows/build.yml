name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom image tag'
        required: false
        default: 'latest'
      environment:
        description: 'Target environment'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test before building
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_mercurio
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_mercurio
    
    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_mercurio
    
    - name: Run tests
      run: npm run test:cov
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_mercurio
        ENCRYPTION_KEK_SECRET: dGVzdF9rZWtfc2VjcmV0X2Zvcl90ZXN0aW5nX29ubHk=
        EMAIL_DEK_SECRET: dGVzdF9lbWFpbF9kZWtfc2VjcmV0X2Zvcl90ZXN0aW5nX29ubHk=
        PHONE_DEK_SECRET: dGVzdF9waG9uZV9kZWtfc2VjcmV0X2Zvcl90ZXN0aW5nX29ubHk=
        EMAIL_FINGERPRINT_SECRET: dGVzdF9lbWFpbF9maW5nZXJwcmludF9zZWNyZXRfZm9yX3Rlc3Rpbmdfb25seQ==
        PHONE_FINGERPRINT_SECRET: dGVzdF9waG9uZV9maW5nZXJwcmludF9zZWNyZXRfZm9yX3Rlc3Rpbmdfb25seQ==
        ENCRYPTION_KEY_VERSION: "1"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
        labels: |
          org.opencontainers.image.title=Mercurio API
          org.opencontainers.image.description=High-performance analytics event ingestion API
          org.opencontainers.image.vendor=Mercurio Team
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: false
    
    - name: Output image details
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
        echo "tags=${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT
    
    - name: Generate build summary
      run: |
        echo "## ðŸš€ Build Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tags Built:**" >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Ready for deployment in Portainer!** ðŸŽ¯" >> $GITHUB_STEP_SUMMARY

  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Notify deployment (optional)
  notify:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify successful build
      run: |
        echo "ðŸŽ‰ New Mercurio API image ready for deployment!"
        echo "Image: ${{ needs.build.outputs.image }}"
        echo "Digest: ${{ needs.build.outputs.digest }}"
        echo ""
        echo "To deploy in Portainer:"
        echo "1. Update image tag to: latest"
        echo "2. Recreate containers"
        echo "3. Run health check"