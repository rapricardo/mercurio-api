const jwt = require('jsonwebtoken');

// Token que est√° falhando 
const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJrZXF3dmN0b3VkcXJjdHFsemJhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyMzUzMTQsImV4cCI6MjA3MTgxMTMxNH0.zGBecypLlXlKB9sNdEcFQ7CIpj9A6Nvo2dav_O-JmdQ';

console.log('üîç Testing JWT Secret');
console.log('=====================');

// Este √â O JWT SECRET (anon key)  
const anonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJrZXF3dmN0b3VkcXJjdHFsemJhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyMzUzMTQsImV4cCI6MjA3MTgxMTMxNH0.zGBecypLlXlKB9sNdEcFQ7CIpj9A6Nvo2dav_O-JmdQ';

console.log('üîç O token √â O JWT SECRET!');
console.log('Token === Anon Key:', token === anonKey);

if (token === anonKey) {
  console.log('\n‚ùå PROBLEMA: O token que recebemos √â o pr√≥prio JWT Secret!');
  console.log('Isso significa que estamos recebendo o anon key, n√£o um user token.');
  console.log('\nüí° SOLU√á√ÉO: O frontend precisa enviar o USER ACCESS TOKEN, n√£o o anon key!');
} else {
  // Se fossem diferentes, testar√≠amos a valida√ß√£o
  try {
    const verified = jwt.verify(token, anonKey, {
      algorithms: ['HS256'],
      issuer: 'supabase'
    });
    console.log('‚úÖ Valida√ß√£o: SUCESSO');
    console.log('User:', verified);
  } catch (error) {
    console.log('‚ùå Valida√ß√£o: FALHOU');
    console.log('Erro:', error.message);
  }
}